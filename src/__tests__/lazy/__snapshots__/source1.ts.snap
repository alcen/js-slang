// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`else if statements work (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function int_type(x) {
    if (x < 0) {
        return \\"negative\\";
    } else if (x === 0) {
        return \\"zero\\";
    } else {
        return \\"positive\\";
    }
}
int_type(0);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "zero",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`else if statements work (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function int_type(x) {
    if (x < 0) {
        return \\"negative\\";
    } else if (x === 0) {
        return \\"zero\\";
    } else {
        return \\"positive\\";
    }
}
int_type(0);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "zero",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`else if statements work (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function int_type(x) {
    if (x < 0) {
        return \\"negative\\";
    } else if (x === 0) {
        return \\"zero\\";
    } else {
        return \\"positive\\";
    }
}
int_type(0);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "zero",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`else statements work (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function if_else(cond) {
    if (cond) {
        error();
        return 456;
    } else {
      return 987;
    }
}
if_else(true && (false && true));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 987,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`else statements work (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function if_else(cond) {
    if (cond) {
        error();
        return 456;
    } else {
      return 987;
    }
}
if_else(true && (false && true));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 987,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`else statements work (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function if_else(cond) {
    if (cond) {
        error();
        return 456;
    } else {
      return 987;
    }
}
if_else(true && (false && true));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 987,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`error evaluates to error (auto): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "error(\\"This is the error\\");",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: "This is the error"],
      "location": SourceLocation {
        "end": Position {
          "column": 26,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: \\"This is the error\\"",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`error evaluates to error (interpreter): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "error(\\"This is the error\\");",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: "This is the error"],
      "location": SourceLocation {
        "end": Position {
          "column": 26,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: \\"This is the error\\"",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`error evaluates to error (native): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "error(\\"This is the error\\");",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: "This is the error"],
      "location": SourceLocation {
        "end": Position {
          "column": 26,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: \\"This is the error\\"",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`execution of an if statement with an expression that evaluates to a number gives an error (auto): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() {
    return 5;
}
if (f()) {
    display(\\"if\\");
} else {
    display(\\"else\\");
}",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "boolean",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 8,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "severity": "Error",
      "side": " as condition",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 4: Expected boolean as condition, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`execution of an if statement with an expression that evaluates to a number gives an error (interpreter): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() {
    return 5;
}
if (f()) {
    display(\\"if\\");
} else {
    display(\\"else\\");
}",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "boolean",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 8,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "severity": "Error",
      "side": " as condition",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 4: Expected boolean as condition, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`execution of an if statement with an expression that evaluates to a number gives an error (native): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() {
    return 5;
}
if (f()) {
    display(\\"if\\");
} else {
    display(\\"else\\");
}",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "boolean",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 8,
        },
        "start": Position {
          "column": 0,
          "line": 4,
        },
      },
      "severity": "Error",
      "side": " as condition",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 4: Expected boolean as condition, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments (display) that are unused are not evaluated (auto): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function add(a, b) {
    return b;
}
add((() => display(\\"helo\\"))(), 3);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments (display) that are unused are not evaluated (interpreter): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function add(a, b) {
    return b;
}
add((() => display(\\"helo\\"))(), 3);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments (display) that are unused are not evaluated (native): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function add(a, b) {
    return b;
}
add((() => display(\\"helo\\"))(), 3);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments (error) that are unused are not evaluated (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function add(a, b) {
    return b;
}
add(error(), 3);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments (error) that are unused are not evaluated (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function add(a, b) {
    return b;
}
add(error(), 3);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments (error) that are unused are not evaluated (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function add(a, b) {
    return b;
}
add(error(), 3);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments are lazily evaluated (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function try_me(test, alternative) {
    return test ? 123 : alternative;
}
try_me(true, head(null));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 123,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments are lazily evaluated (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function try_me(test, alternative) {
    return test ? 123 : alternative;
}
try_me(true, head(null));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 123,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function arguments are lazily evaluated (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function try_me(test, alternative) {
    return test ? 123 : alternative;
}
try_me(true, head(null));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 123,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function does not run if it does not need to (auto): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function square(x) {
    display(\\"squared\\");
    return x * x;
}
const sq = square(7);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function does not run if it does not need to (interpreter): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function square(x) {
    display(\\"squared\\");
    return x * x;
}
const sq = square(7);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function does not run if it does not need to (native): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function square(x) {
    display(\\"squared\\");
    return x * x;
}
const sq = square(7);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function only runs once and value is memoised (auto): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function square(x) {
    display(\\"squared\\");
    return x * x;
}
const sq = square(7);
force(sq);
force(sq);
sq;",
  "displayResult": Array [
    "\\"squared\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 49,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function only runs once and value is memoised (interpreter): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function square(x) {
    display(\\"squared\\");
    return x * x;
}
const sq = square(7);
force(sq);
force(sq);
sq;",
  "displayResult": Array [
    "\\"squared\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 49,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`function only runs once and value is memoised (native): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function square(x) {
    display(\\"squared\\");
    return x * x;
}
const sq = square(7);
force(sq);
force(sq);
sq;",
  "displayResult": Array [
    "\\"squared\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 49,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`if statements work (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function if_else(cond) {
    if (cond) {
        return 456;
    } else {
        error();
        return 987;
    }
}
if_else(true && (false || true));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 456,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`if statements work (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function if_else(cond) {
    if (cond) {
        return 456;
    } else {
        error();
        return 987;
    }
}
if_else(true && (false || true));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 456,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`if statements work (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function if_else(cond) {
    if (cond) {
        return 456;
    } else {
        error();
        return 987;
    }
}
if_else(true && (false || true));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 456,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is boolean returns false for string (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_boolean(\\"hello\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is boolean returns false for string (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_boolean(\\"hello\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is boolean returns false for string (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_boolean(\\"hello\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is boolean returns true for boolean (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_boolean(true || false);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is boolean returns true for boolean (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_boolean(true || false);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is boolean returns true for boolean (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_boolean(true || false);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is function returns false for number (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_function(670);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is function returns false for number (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_function(670);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is function returns false for number (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_function(670);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is function returns true for function (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_function((x, y) => x + y);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is function returns true for function (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_function((x, y) => x + y);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is function returns true for function (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_function((x, y) => x + y);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is number returns false for boolean (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_number(true);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is number returns false for boolean (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_number(true);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is number returns false for boolean (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_number(true);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is number returns true for number (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_number(145);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is number returns true for number (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_number(145);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is number returns true for number (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_number(145);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is string returns false for function (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_string(() => \\"world\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is string returns false for function (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_string(() => \\"world\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is string returns false for function (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_string(() => \\"world\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is string returns true for string (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_string(\\"\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is string returns true for string (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_string(\\"\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is string returns true for string (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "is_string(\\"\\");",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`multiple if-else statements work (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function int_type(x) {
    if (x < 0) {
        return \\"negative\\";
    } else if (x === 0) {
        return \\"zero\\";
    } else if (x === 1) {
        return \\"one\\";
    } else if (x === 2) {
        return \\"two\\";
    } else if (x === 3) {
        return \\"three\\";
    } else if (x === 4) {
        return \\"four\\";
    } else if (x === 5) {
        return \\"five\\";
    } else {
        return \\"positive\\";
    }
}
int_type(9);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "positive",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`multiple if-else statements work (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function int_type(x) {
    if (x < 0) {
        return \\"negative\\";
    } else if (x === 0) {
        return \\"zero\\";
    } else if (x === 1) {
        return \\"one\\";
    } else if (x === 2) {
        return \\"two\\";
    } else if (x === 3) {
        return \\"three\\";
    } else if (x === 4) {
        return \\"four\\";
    } else if (x === 5) {
        return \\"five\\";
    } else {
        return \\"positive\\";
    }
}
int_type(9);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "positive",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`multiple if-else statements work (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function int_type(x) {
    if (x < 0) {
        return \\"negative\\";
    } else if (x === 0) {
        return \\"zero\\";
    } else if (x === 1) {
        return \\"one\\";
    } else if (x === 2) {
        return \\"two\\";
    } else if (x === 3) {
        return \\"three\\";
    } else if (x === 4) {
        return \\"four\\";
    } else if (x === 5) {
        return \\"five\\";
    } else {
        return \\"positive\\";
    }
}
int_type(9);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": "positive",
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`names are lazily accessed (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1 + a;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`names are lazily accessed (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1 + a;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`names are lazily accessed (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 1 + a;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`number literal in if statement gives an error (auto): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (123456) {
    display(\\"if\\");
} else {
    display(\\"else\\");
}",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "boolean",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 5,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "side": " as condition",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Expected boolean as condition, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`number literal in if statement gives an error (interpreter): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (123456) {
    display(\\"if\\");
} else {
    display(\\"else\\");
}",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "boolean",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 5,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "side": " as condition",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Expected boolean as condition, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`number literal in if statement gives an error (native): expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "if (123456) {
    display(\\"if\\");
} else {
    display(\\"else\\");
}",
  "displayResult": Array [],
  "errors": Array [
    TypeError {
      "expected": "boolean",
      "got": "number",
      "location": SourceLocation {
        "end": Position {
          "column": 1,
          "line": 5,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "side": " as condition",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Expected boolean as condition, got number.",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`recursive function gives correct display statements (auto): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function m(f, x) {
    display(\\"m\\");
    return x === 0
        ? x
        : f(x) + m(f, x - 1);
}
m(x => x * 2, 4);",
  "displayResult": Array [
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 20,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`recursive function gives correct display statements (interpreter): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function m(f, x) {
    display(\\"m\\");
    return x === 0
        ? x
        : f(x) + m(f, x - 1);
}
m(x => x * 2, 4);",
  "displayResult": Array [
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 20,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`recursive function gives correct display statements (native): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function m(f, x) {
    display(\\"m\\");
    return x === 0
        ? x
        : f(x) + m(f, x - 1);
}
m(x => x * 2, 4);",
  "displayResult": Array [
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 20,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`recursive function works (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function m(f, x) {
    display(\\"m\\");
    return x === 0
        ? x
        : f(x) + m(f, x - 1);
}
m(x => x * 2, 4);",
  "displayResult": Array [
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 20,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`recursive function works (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function m(f, x) {
    display(\\"m\\");
    return x === 0
        ? x
        : f(x) + m(f, x - 1);
}
m(x => x * 2, 4);",
  "displayResult": Array [
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 20,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`recursive function works (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function m(f, x) {
    display(\\"m\\");
    return x === 0
        ? x
        : f(x) + m(f, x - 1);
}
m(x => x * 2, 4);",
  "displayResult": Array [
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
    "\\"m\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 20,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`self-made pairs work lazily (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const pair = (a, b) => str => str === \\"head\\" ? a : b;
const head = p => p(\\"head\\");
const tail = p => p(\\"tail\\");
const ones = pair(1, ones);
function list_add(x, y) {
    display(x);
    if (x === null || y === null) {
        return null;
    } else {
        return pair(head(x) + head(y), list_add(tail(x), tail(y)));
    }
}
const ints = pair(1, list_add(ones, ints));
head(tail(tail(tail(tail(ints)))));",
  "displayResult": Array [
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`self-made pairs work lazily (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const pair = (a, b) => str => str === \\"head\\" ? a : b;
const head = p => p(\\"head\\");
const tail = p => p(\\"tail\\");
const ones = pair(1, ones);
function list_add(x, y) {
    display(x);
    if (x === null || y === null) {
        return null;
    } else {
        return pair(head(x) + head(y), list_add(tail(x), tail(y)));
    }
}
const ints = pair(1, list_add(ones, ints));
head(tail(tail(tail(tail(ints)))));",
  "displayResult": Array [
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`self-made pairs work lazily (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const pair = (a, b) => str => str === \\"head\\" ? a : b;
const head = p => p(\\"head\\");
const tail = p => p(\\"tail\\");
const ones = pair(1, ones);
function list_add(x, y) {
    display(x);
    if (x === null || y === null) {
        return null;
    } else {
        return pair(head(x) + head(y), list_add(tail(x), tail(y)));
    }
}
const ints = pair(1, list_add(ones, ints));
head(tail(tail(tail(tail(ints)))));",
  "displayResult": Array [
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
    "str => str === \\"head\\" ? a : b",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 5,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`statements that are unused are not evaluated (auto): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "(() => display(\\"helo\\"))();
76;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 76,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`statements that are unused are not evaluated (interpreter): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "(() => display(\\"helo\\"))();
76;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 76,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`statements that are unused are not evaluated (native): expectDisplayResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "(() => display(\\"helo\\"))();
76;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 76,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`variable assignment to another name works (auto): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 4;
const g = a;
g;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`variable assignment to another name works (interpreter): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 4;
const g = a;
g;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`variable assignment to another name works (native): expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = 4;
const g = a;
g;",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
